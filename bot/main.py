import api
import data.coins
import time
from api.api_client import get_all_price
from bot.classes import mk
from bot.handler.regular_symbol import escape_special
from bot.__init__ import *
from bot.utils import send_messages
from bot.handler.start import *
from bot.handler.stop import *
from bot.handler.exit import *

# coin = adict()
# coin.percent = 10
# coin.symbol = 'BTC'
# coin.list = [adict(name='uniswap', price=123),
#               adict(name='coinbase', price=121)]
# coin.difference = 3

# result = get_all_price()
# print(result)

  



import telebot
import time
import threading
import re
from datetime import datetime
from threading import Timer
from telebot import types






print("BOT START")







        


    



def cancel_input(message):
    global waiting_for_input, user_id_waiting, input_message_id
    waiting_for_input = False
    user_id_waiting = None
    if input_message_id:
        bot.delete_message(message.chat.id, input_message_id)

@bot.message_handler(commands=['setmin'])
def set_min(message):
    global waiting_for_input, user_id_waiting, input_message_id
    text = message.text

    match = re.search(r'(\d+(\.\d+)?)', text)
    if match:
        minimum = float(match.group(1))
        bot.reply_to(message, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minimum}%.")
        return

    if waiting_for_input:
        bot.reply_to(message, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    waiting_for_input = True
    user_id_waiting = message.from_user.id

    markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(cancel_button)

    input_message = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:", reply_markup=markup)
    input_message_id = input_message.message_id

    Timer(10, cancel_input, [message]).start()

@bot.message_handler(func=lambda message: waiting_for_input and message.from_user.id == user_id_waiting)
def handle_input(message):
    global minimum, waiting_for_input, user_id_waiting, input_message_id
    text = message.text

    match = re.search(r'(\d+(\.\d+)?)', text)
    
    if match:
        minimum = float(match.group(1))
        bot.reply_to(message, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minimum}%.")
        waiting_for_input = False
        user_id_waiting = None
        if input_message_id:
            try:
                bot.delete_message(message.chat.id, input_message_id)
            except telebot.apihelper.ApiTelegramException:
                pass
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ%'.")

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def callback_cancel(call):
    cancel_input(call.message)


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = mk("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:") \
        + mk().indent() \
        + mk("/start - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.") \
        + mk().indent() \
        + mk("–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.") \
        + mk().indent() \
        + mk("/stop - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.") \
        + mk().indent() \
        + mk("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.") \
        + mk().indent() \
        + mk("/setmin <—á–∏—Å–ª–æ%> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.") \
        + mk().indent() \
        + mk("–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ /setmin 10% —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ 10%.") \
        + mk().indent() \
        + mk("/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥.") \
        + mk().indent() \
        + mk("–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.") \
        + mk().indent() \
        + mk("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setmin, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.") \
        + mk().indent() \
        + mk("üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ%'.") \
        + mk().indent() \
        + mk("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!")
    
    bot.reply_to(message, help_text.code(), parse_mode='MarkdownV2')

        
bot.set_my_commands([
    telebot.types.BotCommand("start", "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    telebot.types.BotCommand("stop",  "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    telebot.types.BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
    telebot.types.BotCommand("setmin", "–ó–∞–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"),
    telebot.types.BotCommand("options", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞"),
    telebot.types.BotCommand("exit", "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"),
])


settings = ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2"]

@bot.message_handler(commands=['options'])
def send_poll(message):
    question = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    options = settings
    bot.send_poll(message.chat.id, question, options, is_anonymous=False, allows_multiple_answers=True)

@bot.poll_answer_handler(func=lambda answer: True)
def handle_poll_answer(answer):
    selected_options = answer.option_ids
    selected_settings = [settings[i] for i in selected_options]
    bot.send_message(answer.user.id, f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(selected_settings)}")


    

bot.polling()